// <auto-generated />
using System;
using FarmaDigitalBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FarmaDigitalBackend.Migrations
{
    [DbContext(typeof(FarmaDbContext))]
    [Migration("20250716054528_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FarmaDigitalBackend.Models.Carrito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_carrito");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creado_en");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("integer")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("carritos", (string)null);
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.DetalleFactura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_detalle_factura");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<int>("IdFactura")
                        .HasColumnType("integer")
                        .HasColumnName("id_factura");

                    b.Property<int>("IdProducto")
                        .HasColumnType("integer")
                        .HasColumnName("id_producto");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("numeric")
                        .HasColumnName("precio_unitario");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric")
                        .HasColumnName("subtotal");

                    b.HasKey("Id");

                    b.HasIndex("IdFactura");

                    b.HasIndex("IdProducto");

                    b.ToTable("DetallesFactura");
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.Factura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_factura");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EstadoPago")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado_pago");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_emision");

                    b.Property<int>("IdOrden")
                        .HasColumnType("integer")
                        .HasColumnName("id_orden");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("integer")
                        .HasColumnName("id_usuario");

                    b.Property<decimal>("Iva")
                        .HasColumnType("numeric")
                        .HasColumnName("iva");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metodo_pago");

                    b.Property<string>("ReferenciaPago")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("referencia_pago");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric")
                        .HasColumnName("total");

                    b.HasKey("Id");

                    b.HasIndex("IdOrden");

                    b.HasIndex("IdUsuario");

                    b.ToTable("facturas", (string)null);
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.ItemCarrito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_item_carrito");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<int>("IdCarrito")
                        .HasColumnType("integer")
                        .HasColumnName("id_carrito");

                    b.Property<int>("IdProducto")
                        .HasColumnType("integer")
                        .HasColumnName("id_producto");

                    b.HasKey("Id");

                    b.HasIndex("IdCarrito");

                    b.HasIndex("IdProducto");

                    b.ToTable("ItemsCarrito");
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.LogAuditoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_log");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("accion");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creado_en");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("DireccionIp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("direccion_ip");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("integer")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("LogsAuditoria");
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.Orden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_orden");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creado_en");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<int?>("IdCarrito")
                        .HasColumnType("integer")
                        .HasColumnName("id_carrito");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("integer")
                        .HasColumnName("id_usuario");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metodo_pago");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric")
                        .HasColumnName("total");

                    b.HasKey("Id");

                    b.HasIndex("IdCarrito");

                    b.HasIndex("IdUsuario");

                    b.ToTable("ordenes", (string)null);
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_producto");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("categoria");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creado_en");

                    b.Property<int?>("CreadoPorId")
                        .HasColumnType("integer")
                        .HasColumnName("creado_por");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<bool>("EsSensible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("es_sensible");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("precio");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("stock");

                    b.HasKey("Id");

                    b.HasIndex("CreadoPorId");

                    b.ToTable("productos", (string)null);
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_rol");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("nombre_rol");

                    b.HasKey("Id");

                    b.HasIndex("NombreRol")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_usuario");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContrasenaHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("correo");

                    b.Property<DateTime>("CreadoEn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creado_en")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("IdRol")
                        .HasColumnType("integer")
                        .HasColumnName("id_rol");

                    b.Property<bool>("MfaActivado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("mfa_activado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.HasIndex("Correo")
                        .IsUnique();

                    b.HasIndex("IdRol");

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.Carrito", b =>
                {
                    b.HasOne("FarmaDigitalBackend.Models.Usuario", "Usuario")
                        .WithMany("Carritos")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.DetalleFactura", b =>
                {
                    b.HasOne("FarmaDigitalBackend.Models.Factura", "Factura")
                        .WithMany("DetallesFactura")
                        .HasForeignKey("IdFactura")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmaDigitalBackend.Models.Producto", "Producto")
                        .WithMany("DetallesFactura")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Factura");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.Factura", b =>
                {
                    b.HasOne("FarmaDigitalBackend.Models.Orden", "Orden")
                        .WithMany("Facturas")
                        .HasForeignKey("IdOrden")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmaDigitalBackend.Models.Usuario", "Usuario")
                        .WithMany("Facturas")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orden");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.ItemCarrito", b =>
                {
                    b.HasOne("FarmaDigitalBackend.Models.Carrito", "Carrito")
                        .WithMany("ItemsCarrito")
                        .HasForeignKey("IdCarrito")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmaDigitalBackend.Models.Producto", "Producto")
                        .WithMany("ItemsCarrito")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrito");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.LogAuditoria", b =>
                {
                    b.HasOne("FarmaDigitalBackend.Models.Usuario", "Usuario")
                        .WithMany("LogsAuditoria")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.Orden", b =>
                {
                    b.HasOne("FarmaDigitalBackend.Models.Carrito", "Carrito")
                        .WithMany("Ordenes")
                        .HasForeignKey("IdCarrito");

                    b.HasOne("FarmaDigitalBackend.Models.Usuario", "Usuario")
                        .WithMany("Ordenes")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrito");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.Producto", b =>
                {
                    b.HasOne("FarmaDigitalBackend.Models.Usuario", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("CreadoPorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UsuarioCreador");
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.Usuario", b =>
                {
                    b.HasOne("FarmaDigitalBackend.Models.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.Carrito", b =>
                {
                    b.Navigation("ItemsCarrito");

                    b.Navigation("Ordenes");
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.Factura", b =>
                {
                    b.Navigation("DetallesFactura");
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.Orden", b =>
                {
                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.Producto", b =>
                {
                    b.Navigation("DetallesFactura");

                    b.Navigation("ItemsCarrito");
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("FarmaDigitalBackend.Models.Usuario", b =>
                {
                    b.Navigation("Carritos");

                    b.Navigation("Facturas");

                    b.Navigation("LogsAuditoria");

                    b.Navigation("Ordenes");
                });
#pragma warning restore 612, 618
        }
    }
}
